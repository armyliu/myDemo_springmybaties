<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">  
<configuration>  
	<settings>
		<setting name="callSettersOnNulls" value="true" />
	
		<!--这个配置使全局的映射器启用或禁用 缓存-->
		<!-- <setting name="cacheEnabled" value="true"/> -->
		<!--全局启用或禁用延迟加载。当禁用时, 所有关联对象都会即时加载-->
		<!-- <setting name="lazyLoadingEnabled" value="true"/> -->
		<!--当启用时, 有延迟加载属性的对象在被 调用时将会完全加载任意属性。否则, 每种属性将会按需要加载-->
		<!-- <setting name="aggressiveLazyLoading " value="true"/> -->
		<!--允许或不允许多种结果集从一个单独 的语句中返回(需要适合的驱动) -->
		<!-- <setting name="multipleResultSetsEnabled" value="true"/> -->
		<!--使用列标签代替列名。 不同的驱动在这 方便表现不同。 参考驱动文档或充分测 试两种方法来决定所使用的驱动-->
		<!-- <setting name="useColumnLabel" value="true"/> -->
		<!--允许 JDBC 支持生成的键。 需要适合的 驱动。 如果设置为 true 则这个设置强制 生成的键被使用, 尽管一些驱动拒绝兼 容但仍然有效(比如 Derby)-->
		<!-- <setting name="useGeneratedKeys" value="false"/> -->
		<!--指定 MyBatis 如何自动映射列到字段/ 属性。PARTIAL 只会自动映射简单, 没有嵌套的结果。FULL 会自动映射任 意复杂的结果(嵌套的或其他情况)-->
		<!--NONE, PARTIAL, FULL-->
		<!-- <setting name="autoMappingBehavior" value="PARTIAL"/> -->
		<!--配置默认的执行器。SIMPLE 执行器没 有什么特别之处。REUSE 执行器重用 预处理语句。BATCH 执行器重用语句 和批量更新 -->
		<!--SIMPLE REUSE BATCH -->
		<!-- <setting name="defaultExecutorType" value="SIMPLE"/> -->
		<!--设置超时时间, 它决定驱动等待一个数 据库响应的时间-->
		<!-- <setting name="defaultStatementTimeout" value="25"/> -->
		<!--Allows using RowBounds on nested statements-->
		<!-- <setting name="safeRowBoundsEnabled" value="false"/> -->
		<!--Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn-->
		<!-- <setting name="mapUnderscoreToCamelCase" value="false"/> -->
		<!--MyBatis uses local cache to prevent circular references and speed up repeated nested queries. By default (SESSION) all queries executed during a session are cached. If localCacheScope=STATEMENT local session will be used just for statement execution, no data will be shared between two different calls to the same SqlSession-->
		<!--SESSION | STATEMENT-->
		<!-- <setting name="localCacheScope" value="SESSION"/> -->
		<!--Specifies the JDBC type for null values when no specific JDBC type was provided for the parameter. Some drivers require specifying the column JDBC type but others work with generic values like NULL, VARCHAR or OTHER-->
		<!--JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER-->
		<!-- <setting name="jdbcTypeForNull" value="OTHER"/> -->
		<!--Specifies which Object's methods trigger a lazy load-->
		<!-- <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/> -->
		<!--Specifies the language used by default for dynamic SQL generation-->
		<!-- <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver " /> -->
		<!--当结果集中含有Null值时是否执行映射对象的setter或者Map对象的put方法。此设置对于原始类型如int,boolean等无效 默认false-->
		<!-- <setting name="callSettersOnNulls" value="true" /> -->
		<!--Specifies the prefix string that MyBatis will add to the logger names-->
		<!--Any String -->
		<!-- <setting name="logPrefix" value="" /> -->
		<!--Specifies which logging implementation MyBatis should use. If this setting is not present logging implementation will be autodiscovered-->
		<!--SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING -->
		<!-- <setting name="logImpl" value="" /> -->
		<!--Specifies the proxy tool that MyBatis will use for creating lazy loading capable objects-->
		<!--CGLIB | JAVASSIST-->
		<!-- <setting name="proxyFactory" value="CGLIB" /> -->
	</settings> 
</configuration>    